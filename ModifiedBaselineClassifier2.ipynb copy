{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /Users/mary/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /Users/mary/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/mary/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package stopwords to /Users/mary/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "import nltk\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "nltk.download('stopwords')\n",
    "\n",
    "\n",
    "#testing out git version control"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import nltk\n",
    "from matplotlib import pyplot as plt\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk import pos_tag\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.corpus import wordnet\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from nltk.stem import PorterStemmer \n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from collections import defaultdict\n",
    "from nltk.corpus import wordnet as wn\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn import model_selection, naive_bayes, svm\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, precision_recall_curve,f1_score,auc\n",
    "from sklearn.metrics import confusion_matrix, classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mary/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3071: DtypeWarning: Columns (0) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Set seed for reproduceable results\n",
    "np.random.seed(500)\n",
    "# Read in to Pandas DataFrame and drop the first row(which contained column names as I have assigned new names)\n",
    "reviews = pd.read_csv(r\"rt_reviews.csv\", names = ['target', 'review'], encoding = 'latin-1')\n",
    "reviews = reviews.iloc[1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standardize target data types to numeric\n",
    "for i in range(reviews.shape[0]):\n",
    "    if(reviews['target'].values[i] == '0'):\n",
    "        reviews['target'].values[i] = 0\n",
    "    elif(reviews['target'].values[i] == '1'):\n",
    "        reviews['target'].values[i] = 1\n",
    "for i in range(reviews.shape[0]):\n",
    "    if(isinstance(reviews['target'].values[i],str)):\n",
    "        print(\"Caught: \",reviews['target'].values[i])\n",
    "    if(reviews['target'].values[i] != 0 and reviews['target'].values[i] != 1):\n",
    "        print(\"Error\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Choose number of samples to use\n",
    "reviews = reviews.iloc[:1000] #removed two zeros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 2)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove and row where either datafield is blank, no rows contained blank data so the shape remains 480000,2 \n",
    "reviews.dropna(inplace = True)\n",
    "reviews.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert all text to lowercase\n",
    "reviews['review'] = [entry.lower() for entry in reviews['review']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tokenize each review: this process converts each review into a set of words. \n",
    "reviews['review'] = [word_tokenize(entry) for entry in reviews['review']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "################# Lemmatizing ##############\n",
    "\n",
    "# Creating tags so that lemmatizer can understand verbs from nouns from adjectives \n",
    "tag_map = defaultdict(lambda : wn.NOUN)\n",
    "tag_map['J'] = wn.ADJ\n",
    "tag_map['V'] = wn.VERB\n",
    "tag_map['R'] = wn.ADV\n",
    "\n",
    "for index,entry in enumerate(reviews['review']):\n",
    "    index = index+1 # Index seems to off by one, this fixes it\n",
    "    # Words that follow the rules will end up in this list\n",
    "    Final_words = []\n",
    "    \n",
    "    word_Lemmatized = WordNetLemmatizer()\n",
    "    \n",
    "    for word, tag in pos_tag(entry):\n",
    "        if word not in stopwords.words('english') and word.isalpha() and wordnet.synsets(word):\n",
    "            word_Final = word_Lemmatized.lemmatize(word, tag_map[tag[0]])\n",
    "            Final_words.append(word_Final)\n",
    "        reviews.loc[index, 'lemmatized_words'] = str(Final_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "################ Unaltered Words ############\n",
    "\n",
    "for index, entry in enumerate(reviews['review']):\n",
    "    index = index + 1\n",
    "    Final_words = []\n",
    "        \n",
    "    for word, tag in pos_tag(entry):\n",
    "        if word not in stopwords.words('english') and word.isalpha() and wordnet.synsets(word):\n",
    "            word_Final = word  #This is where a stemmer would go\n",
    "            Final_words.append(word_Final)\n",
    "        reviews.loc[index, 'unaltered_words'] = str(Final_words)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "############### Stemming Words ###############\n",
    "\n",
    "for index, entry in enumerate(reviews['review']):\n",
    "    index = index + 1\n",
    "    Final_words = []\n",
    "        \n",
    "    word_Stemmer = PorterStemmer()\n",
    "        \n",
    "    for word, tag in pos_tag(entry):\n",
    "        if word not in stopwords.words('english') and word.isalpha() and wordnet.synsets(word):\n",
    "            word_Final = word_Stemmer.stem(word)  #This is where a stemmer would go\n",
    "            Final_words.append(word_Final)\n",
    "        reviews.loc[index, 'stemmed_words'] = str(Final_words)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target</th>\n",
       "      <th>review</th>\n",
       "      <th>lemmatized_words</th>\n",
       "      <th>unaltered_words</th>\n",
       "      <th>stemmed_words</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>[manakamana, does, n't, answer, any, questions...</td>\n",
       "      <td>['answer', 'question', 'yet', 'make', 'point',...</td>\n",
       "      <td>['answer', 'questions', 'yet', 'makes', 'point...</td>\n",
       "      <td>['answer', 'question', 'yet', 'make', 'point',...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>[wilfully, offensive, and, powered, by, a, che...</td>\n",
       "      <td>['wilfully', 'offensive', 'power', 'machismo',...</td>\n",
       "      <td>['wilfully', 'offensive', 'powered', 'machismo...</td>\n",
       "      <td>['wil', 'offens', 'power', 'machismo', 'good',...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>[it, would, be, difficult, to, imagine, materi...</td>\n",
       "      <td>['difficult', 'imagine', 'material', 'wrong', ...</td>\n",
       "      <td>['difficult', 'imagine', 'material', 'wrong', ...</td>\n",
       "      <td>['difficult', 'imagin', 'materi', 'wrong', 'sp...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>[despite, the, gusto, its, star, brings, to, t...</td>\n",
       "      <td>['despite', 'gusto', 'star', 'brings', 'role',...</td>\n",
       "      <td>['despite', 'gusto', 'star', 'brings', 'role',...</td>\n",
       "      <td>['despit', 'gusto', 'star', 'bring', 'role', '...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>[if, there, was, a, good, idea, at, the, core,...</td>\n",
       "      <td>['good', 'idea', 'core', 'film', 'bury', 'unsi...</td>\n",
       "      <td>['good', 'idea', 'core', 'film', 'buried', 'un...</td>\n",
       "      <td>['good', 'idea', 'core', 'film', 'buri', 'unsi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>1</td>\n",
       "      <td>[[, writer-director, azazel, jacobs, ], clearl...</td>\n",
       "      <td>['jacob', 'clearly', 'eye', 'ear', 'confused',...</td>\n",
       "      <td>['jacobs', 'clearly', 'eye', 'ear', 'confused'...</td>\n",
       "      <td>['jacob', 'clearli', 'eye', 'ear', 'confus', '...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0</td>\n",
       "      <td>[a, disastrous, father-son, endeavor, about, a...</td>\n",
       "      <td>['disastrous', 'endeavor', 'calamitous', 'expe...</td>\n",
       "      <td>['disastrous', 'endeavor', 'calamitous', 'expe...</td>\n",
       "      <td>['disastr', 'endeavor', 'calamit', 'expedit', ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>1</td>\n",
       "      <td>[inspiring, docu, advocates, for, legislation,...</td>\n",
       "      <td>['inspire', 'advocate', 'legislation', 'help',...</td>\n",
       "      <td>['inspiring', 'advocates', 'legislation', 'hel...</td>\n",
       "      <td>['inspir', 'advoc', 'legisl', 'help', 'famili']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0</td>\n",
       "      <td>[um, dos, tipos, de, besteira, mais, irritante...</td>\n",
       "      <td>['do', 'de', 'de', 'para']</td>\n",
       "      <td>['dos', 'de', 'de', 'para']</td>\n",
       "      <td>['do', 'de', 'de', 'para']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>1</td>\n",
       "      <td>[i, do, n't, think, maggie, gyllenhaal, has, e...</td>\n",
       "      <td>['think', 'ever', 'radiantly', 'sexy', 'harrie...</td>\n",
       "      <td>['think', 'ever', 'radiantly', 'sexy', 'harrie...</td>\n",
       "      <td>['think', 'ever', 'radiantli', 'sexi', 'harri'...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     target                                             review  \\\n",
       "1         1  [manakamana, does, n't, answer, any, questions...   \n",
       "2         1  [wilfully, offensive, and, powered, by, a, che...   \n",
       "3         0  [it, would, be, difficult, to, imagine, materi...   \n",
       "4         0  [despite, the, gusto, its, star, brings, to, t...   \n",
       "5         0  [if, there, was, a, good, idea, at, the, core,...   \n",
       "...     ...                                                ...   \n",
       "996       1  [[, writer-director, azazel, jacobs, ], clearl...   \n",
       "997       0  [a, disastrous, father-son, endeavor, about, a...   \n",
       "998       1  [inspiring, docu, advocates, for, legislation,...   \n",
       "999       0  [um, dos, tipos, de, besteira, mais, irritante...   \n",
       "1000      1  [i, do, n't, think, maggie, gyllenhaal, has, e...   \n",
       "\n",
       "                                       lemmatized_words  \\\n",
       "1     ['answer', 'question', 'yet', 'make', 'point',...   \n",
       "2     ['wilfully', 'offensive', 'power', 'machismo',...   \n",
       "3     ['difficult', 'imagine', 'material', 'wrong', ...   \n",
       "4     ['despite', 'gusto', 'star', 'brings', 'role',...   \n",
       "5     ['good', 'idea', 'core', 'film', 'bury', 'unsi...   \n",
       "...                                                 ...   \n",
       "996   ['jacob', 'clearly', 'eye', 'ear', 'confused',...   \n",
       "997   ['disastrous', 'endeavor', 'calamitous', 'expe...   \n",
       "998   ['inspire', 'advocate', 'legislation', 'help',...   \n",
       "999                          ['do', 'de', 'de', 'para']   \n",
       "1000  ['think', 'ever', 'radiantly', 'sexy', 'harrie...   \n",
       "\n",
       "                                        unaltered_words  \\\n",
       "1     ['answer', 'questions', 'yet', 'makes', 'point...   \n",
       "2     ['wilfully', 'offensive', 'powered', 'machismo...   \n",
       "3     ['difficult', 'imagine', 'material', 'wrong', ...   \n",
       "4     ['despite', 'gusto', 'star', 'brings', 'role',...   \n",
       "5     ['good', 'idea', 'core', 'film', 'buried', 'un...   \n",
       "...                                                 ...   \n",
       "996   ['jacobs', 'clearly', 'eye', 'ear', 'confused'...   \n",
       "997   ['disastrous', 'endeavor', 'calamitous', 'expe...   \n",
       "998   ['inspiring', 'advocates', 'legislation', 'hel...   \n",
       "999                         ['dos', 'de', 'de', 'para']   \n",
       "1000  ['think', 'ever', 'radiantly', 'sexy', 'harrie...   \n",
       "\n",
       "                                          stemmed_words  \n",
       "1     ['answer', 'question', 'yet', 'make', 'point',...  \n",
       "2     ['wil', 'offens', 'power', 'machismo', 'good',...  \n",
       "3     ['difficult', 'imagin', 'materi', 'wrong', 'sp...  \n",
       "4     ['despit', 'gusto', 'star', 'bring', 'role', '...  \n",
       "5     ['good', 'idea', 'core', 'film', 'buri', 'unsi...  \n",
       "...                                                 ...  \n",
       "996   ['jacob', 'clearli', 'eye', 'ear', 'confus', '...  \n",
       "997   ['disastr', 'endeavor', 'calamit', 'expedit', ...  \n",
       "998     ['inspir', 'advoc', 'legisl', 'help', 'famili']  \n",
       "999                          ['do', 'de', 'de', 'para']  \n",
       "1000  ['think', 'ever', 'radiantli', 'sexi', 'harri'...  \n",
       "\n",
       "[1000 rows x 5 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Train and Test splits \n",
    "test_s = .15\n",
    "train_x, test_x, train_y, test_y = model_selection.train_test_split(reviews['unaltered_words'], \n",
    "                                                                    reviews['target'], test_size=test_s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "train_x Shape:  (850,)\n",
      "\n",
      "train_y Shape:  (850,)\n",
      "\n",
      "test_x Shape:  (150,)\n",
      "\n",
      "test_y Shape:  (150,)\n"
     ]
    }
   ],
   "source": [
    "print(\"\\ntrain_x Shape: \", train_x.shape)\n",
    "print(\"\\ntrain_y Shape: \", train_y.shape)\n",
    "print(\"\\ntest_x Shape: \", test_x.shape)\n",
    "print(\"\\ntest_y Shape: \", test_y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Encode target data\n",
    "Encoder = LabelEncoder()\n",
    "train_y = Encoder.fit_transform(train_y)\n",
    "test_y = Encoder.fit_transform(test_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4601"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_f = 100000\n",
    "Tfidf_vect = TfidfVectorizer(max_features=max_f)\n",
    "Tfidf_vect.fit(reviews['unaltered_words'])\n",
    "train_x_Tfidf = Tfidf_vect.transform(train_x)\n",
    "test_x_Tfidf = Tfidf_vect.transform(test_x)\n",
    "#print(Tfidf_vect.vocabulary_)\n",
    "len(Tfidf_vect.vocabulary_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python dictionary of various test results: \n",
    "\n",
    "# These test results use a data set that contains no english words, is lemmatized\n",
    "\n",
    "zach_test_results = {\n",
    "    # Max features percentages are out of 36131(which is max features when\n",
    "    # full 480000 sampels and non english words removed, .15 test size)\n",
    "    \n",
    "    # 9033 features \n",
    "    \"max-features_.25\" : {\"accuracy\" : 0.7748 , \"f1-avg\" : 0.775 },\n",
    "    \n",
    "    # 18066\n",
    "    \"max-features_.50\" : {\"accuracy\" : 0.7810 , \"f1-avg\" : 0.78 },\n",
    "    \n",
    "    # 27120\n",
    "    \"max-features_.75\" : {\"accuracy\" : 0.7841 , \"f1-avg\" : 0.78 },\n",
    "    \n",
    "    #30711\n",
    "    \"max-features_.85\" : {\"accuracy\" : 0.7845, \"f1-avg\" : 0.785 },\n",
    "    \n",
    "    # 34324\n",
    "    \"max-features_.95\" : {\"accuracy\" : 0.7845, \"f1-avg\" : 0.785},\n",
    "    \n",
    "    # 36131\n",
    "    \"max-features_1.00\" : {\"accuracy\" : 0.7845, \"f1-avg\" : 0.785},\n",
    "    \n",
    "    \n",
    "    # Removing words with low information \n",
    "    \n",
    "    # results in only 6027 features meaning the majority are below 100 df\n",
    "    \"min_df_100\" : {\"accuracy\" : 0.7673 , \"f1-avg\": 0.77 },\n",
    "    \n",
    "    # results in 9060 feautures\n",
    "    \"min_df_50\" : {\"accuracy\" : 0.7748 , \"f1-avg\": 0.775 },\n",
    "    \n",
    "    # results in 18458 features\n",
    "    \"min_df_10\" : {\"accuracy\" : 0.7811 , \"f1-avg\": 0.78},\n",
    "    \n",
    "    # results in 23402 features\n",
    "    \"min_df_5\" : {\"accuracy\" : 0.7833, \"f1-avg\": 0.78 },\n",
    "    \n",
    "    #results in 36131 features\n",
    "    \"min_df_1\" : {\"accuracy\" : 0.7845, \"f1-avg\": 0.785 },\n",
    "    \n",
    "    #results in 36131 features\n",
    "    \"min_df_0\" : {\"accuracy\" : 0.7845, \"f1-avg\": 0.785}, \n",
    "    \n",
    "    # when non english features taken out only 36131 features\n",
    "    # when non english words not taken out 69635\n",
    "    \"max-samples-norestriction-wo-nonenglish-test.15\": {\"accuracy\" : 0.7845, \"f1-avg\" : 0.785},\n",
    "    \"max-samples-norestriction-w-nonenglish-test.15\": {\"accuracy\" : 0.79275, \"f1-avg\" : 0.79},\n",
    "    \n",
    "    # trained with 480K samples and titles removed\n",
    "    #36131 features\n",
    "    \"lemma\" : {\"accuracy\" : .7833 , 'f1-avg' : .78},\n",
    "    #24835 features \n",
    "    \"stem\" : {\"accuracy\" : .7792 , 'f1-avg' : .78},\n",
    "    #47506 features \n",
    "    \"unaltered\" : {\"accuracy\" : .7945, 'f1-avg' : .795}, \n",
    "    \n",
    "    # trained with 10K samples and titles removed\n",
    "    #12775 features\n",
    "    \"lemma\" : {\"accuracy\" : .708 , 'f1-avg' : .705},\n",
    "    #10402 features \n",
    "    \"stem\" : {\"accuracy\" : .7153 , 'f1-avg' : .715},\n",
    "    #15973 f \n",
    "    \"unaltered\" : {\"accuracy\" : .7093, 'f1-avg' : .71}, \n",
    "    \n",
    "     # trained with 100K samples and titles removed\n",
    "    #26600 features\n",
    "    \"lemma\" : {\"accuracy\" : .77507 , 'f1-avg' : .775},\n",
    "    #19459 features \n",
    "    \"stem\" : {\"accuracy\" : .762 , 'f1-avg' : .76},\n",
    "    #34772 f \n",
    "    \"unaltered\" : {\"accuracy\" : .7752, 'f1-avg' : .78}, \n",
    "    \n",
    "    # best performance so far, but test split may be too small. \n",
    "    \"unaltered_w/_.05test\" : {\"accuracy\" : .796, 'f1-avg' : .8}\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  0.6666666666666666\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.72      0.55      0.62        75\n",
      "           1       0.63      0.79      0.70        75\n",
      "\n",
      "    accuracy                           0.67       150\n",
      "   macro avg       0.68      0.67      0.66       150\n",
      "weighted avg       0.68      0.67      0.66       150\n",
      "\n"
     ]
    }
   ],
   "source": [
    "nb = naive_bayes.MultinomialNB()\n",
    "nb.fit(train_x_Tfidf, train_y)\n",
    "\n",
    "# predict the target on validation data\n",
    "pred_nb = nb.predict(test_x_Tfidf)\n",
    "\n",
    "# output accuracy just to show it works\n",
    "print(\"Accuracy: \", accuracy_score(pred_nb, test_y))\n",
    "nb_probs = nb.predict_proba(test_x_Tfidf)\n",
    "nb_probs = nb_probs[:,1]\n",
    "print(classification_report(test_y, pred_nb, labels=[0,1]))\n",
    "# svm = SVC(probability=True)\n",
    "# svm.fit(train_x_Tfidf, train_y)\n",
    "# pred_svm = svm.predict(test_x_Tfidf)\n",
    "# print(\"Accuracy: \", accuracy_score(pred_svm, test_y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'sklearn.svm' has no attribute 'predict_proba'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-26ef9eed6cc3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mnb_probs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_x_Tfidf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mnb_probs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnb_probs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0msvm_probs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msvm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_x_Tfidf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0msvm_probs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msvm_probs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'sklearn.svm' has no attribute 'predict_proba'"
     ]
    }
   ],
   "source": [
    "#Analysis\n",
    "\n",
    "#Predict Probability\n",
    "nb_probs = nb.predict_proba(test_x_Tfidf)\n",
    "nb_probs = nb_probs[:,1]\n",
    "svm_probs = svm.predict_proba(test_x_Tfidf)\n",
    "svm_probs = svm_probs[:,1]\n",
    "\n",
    "#Classification Report\n",
    "print(classification_report(test_y, pred_nb, labels=[0,1]))\n",
    "print(classification_report(test_y, pred_svm, labels=[0,1]))\n",
    "\n",
    "#Calculate precision-recall\n",
    "precision_nb, recall_nb, thresholds_nb = precision_recall_curve(test_y, nb_probs)\n",
    "precision_svm, recall_svm, thresholds_svm = precision_recall_curve(test_y, svm_probs)\n",
    "\n",
    "#Calculate F1\n",
    "f1_nb = f1_score(test_y, pred_nb)\n",
    "f1_svm = f1_score(test_y, pred_svm)\n",
    "\n",
    "#Calculate precision recal auc\n",
    "# auc_nb = auc(recall_nb, precision_nb)\n",
    "# auc_svm = auc(recall_svm, precision_svm)\n",
    "\n",
    "# summarize scores\n",
    "print(\"Test Split: \", test_s)\n",
    "print(\"Max Features: \", max_f)\n",
    "print('Naive-Bayes: f1=%.3f' % (f1_nb))\n",
    "print(\"Accuracy: \", accuracy_score(pred_nb, test_y))\n",
    "print('Support Vector Machine: f1=%.3f' % (f1_svm))\n",
    "print(\"Accuracy: \", accuracy_score(pred_svm, test_y))\n",
    "\n",
    "\n",
    "# plot the precision-recall curves\n",
    "no_skill = len(test_y[test_y==1]) / len(test_y)\n",
    "pyplot.plot([0, 1], [no_skill, no_skill], linestyle='--', label='No Skill')\n",
    "pyplot.plot(recall_nb, precision_nb, marker='.', label='Naive-Bayes')\n",
    "pyplot.plot(recall_svm, precision_svm, marker='.', label='SVM')\n",
    "\n",
    "# axis labels\n",
    "pyplot.xlabel('Recall')\n",
    "pyplot.ylabel('Precision')\n",
    "\n",
    "# show the legend\n",
    "pyplot.legend()\n",
    "\n",
    "# show the plot\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "############### Lemma vs Stem vs Unaltered 480k ###################\n",
    "\n",
    "# performed on 480k samples with non english words removed\n",
    "width = .3\n",
    "pltData = pd.DataFrame({ \n",
    "'accuracy': [.7833, .7792, .7945], \n",
    "'f1-score' : [.78, .78,.795]})\n",
    "\n",
    "pltData[['f1-score', 'accuracy']].plot(kind = 'bar', width = width)\n",
    "\n",
    "ax = plt.gca()\n",
    "\n",
    "plt.xlim([-width, len(pltData['accuracy'])-width])\n",
    "\n",
    "ax.set_ylim([.77, .8])\n",
    "ax.set_xticklabels(('Lemmatized', 'Stemmed', 'Unaltered'))\n",
    "ax.legend(labels = ['f1-score', 'accuracy'])\n",
    "ax.set_title(\"Performance by Word Alteration type\")\n",
    "ax.set_ylabel('Performance')\n",
    "ax.set_xlabel('Word Alteration type')\n",
    "\n",
    "\n",
    "plt.show()\n",
    "\n",
    "############### Lemma vs Stem vs Unaltered 10k ###################\n",
    "\n",
    "width = .3\n",
    "pltData = pd.DataFrame({ \n",
    "'accuracy': [.708, .7153, .7093], \n",
    "'f1-score' : [.705, .715,.71]})\n",
    "\n",
    "pltData[['f1-score', 'accuracy']].plot(kind = 'bar', width = width)\n",
    "\n",
    "ax = plt.gca()\n",
    "\n",
    "plt.xlim([-width, len(pltData['accuracy'])-width])\n",
    "\n",
    "ax.set_ylim([.7, .72])\n",
    "ax.set_xticklabels(('Lemmatized', 'Stemmed', 'Unaltered'))\n",
    "ax.legend(labels = ['f1-score', 'accuracy'])\n",
    "ax.set_title(\"Performance by Word Alteration type\")\n",
    "ax.set_ylabel('Performance')\n",
    "ax.set_xlabel('Word Alteration type')\n",
    "\n",
    "\n",
    "plt.show()\n",
    "\n",
    "\n",
    "############### Lemma vs Stem vs Unaltered 100k ###################\n",
    "\n",
    "width = .3\n",
    "pltData = pd.DataFrame({ \n",
    "'accuracy': [.7751, .762, .7752], \n",
    "'f1-score' : [.775, .76,.78]})\n",
    "\n",
    "pltData[['f1-score', 'accuracy']].plot(kind = 'bar', width = width)\n",
    "\n",
    "ax = plt.gca()\n",
    "\n",
    "plt.xlim([-width, len(pltData['accuracy'])-width])\n",
    "\n",
    "ax.set_ylim([.75, .785])\n",
    "ax.set_xticklabels(('Lemmatized', 'Stemmed', 'Unaltered'))\n",
    "ax.legend(labels = ['f1-score', 'accuracy'])\n",
    "ax.set_title(\"Performance by Word Alteration type\")\n",
    "ax.set_ylabel('Performance')\n",
    "ax.set_xlabel('Word Alteration type')\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "############### Alternative Plot for minumum document frequency ###################\n",
    "\n",
    "width = .25 \n",
    "pltData = pd.DataFrame({ \n",
    "'accuracy': [.7845, .7833, .7811, .7748, .7673], \n",
    "'f1-score' : [.785, .78, .78, .775, .77], \n",
    "'avg' : [.78475, .7817, .7805, .7749, .7686]})\n",
    "\n",
    "pltData[['f1-score', 'accuracy']].plot(kind = 'bar', width = width)\n",
    "pltData['avg'].plot(color = \"tab:cyan\")\n",
    "\n",
    "ax = plt.gca()\n",
    "\n",
    "plt.xlim([-width, len(pltData['accuracy'])-width])\n",
    "\n",
    "ax.set_ylim([.76, .79])\n",
    "ax.set_xticklabels(('1', '5', '10', '50', '100'))\n",
    "ax.legend(labels = ['avg','f1-score', 'accuracy'])\n",
    "ax.set_title(\"Performance by Minimum document frequency\")\n",
    "ax.set_ylabel('Performance')\n",
    "ax.set_xlabel('Minimum Document Frequency')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "############### Plot for Max features ###################\n",
    "\n",
    "width = .25 \n",
    "pltData = pd.DataFrame({ \n",
    "'accuracy': [.7748, .7810, .7841, .7845, .7845, .7845], \n",
    "'f1-score' : [.775, .78, .78, .785, .785, .785], \n",
    "'avg' : [.7749, .7805, .7820, .78475, .78475, .78475]})\n",
    "\n",
    "pltData[['f1-score', 'accuracy']].plot(kind = 'bar', width = width)\n",
    "pltData['avg'].plot(color = \"tab:cyan\")\n",
    "\n",
    "ax = plt.gca()\n",
    "\n",
    "plt.xlim([-width, len(pltData['accuracy'])-width])\n",
    "\n",
    "ax.set_ylim([.77, .79])\n",
    "ax.set_xticklabels(('25%', '50%', '75%', '85%', '95%', '100%'))\n",
    "ax.legend(labels = ['avg','f1-score', 'accuracy'])\n",
    "ax.set_title(\"Performance by Percentage of Max Features\")\n",
    "ax.set_ylabel('Performance')\n",
    "ax.set_xlabel('Percentage of Max Features')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
